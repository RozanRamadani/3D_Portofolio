/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Paris Mutter (https://sketchfab.com/octrpus)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/abstract-shape-0d47375184474088945581568115e2d9
Title: Abstract Shape
*/

import React, { useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'

const AbstractShape = (props) => {
    const group = useRef()
    const { nodes, materials, animations } = useGLTF('/models/abstract_shape.glb')
    const { actions } = useAnimations(animations, group)

    // Animasi rotasi 360 derajat
    useFrame((state, delta) => {
        if (group.current) {
            group.current.rotation.y += delta * 0.7; // 0.7 = kecepatan putar, bisa diubah
        }
    });

    return (
        <group ref={group} {...props} dispose={null}>
            <group name="Sketchfab_Scene">
                <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
                    <group
                        name="784609a9569d41359a3046ddbb5e1fc7fbx"
                        rotation={[Math.PI / 2, 0, 0]}
                        scale={0.01}>
                        <group name="Object_2">
                            <group name="RootNode">
                                <group name="Frame" position={[0, 8.661, 0]} scale={6.817}>
                                    <mesh
                                        name="Frame_m_Frame_0"
                                        castShadow
                                        receiveShadow
                                        geometry={nodes.Frame_m_Frame_0.geometry}
                                        material={materials.m_Frame}
                                    />
                                    <group name="Glow">
                                        <mesh
                                            name="Glow_m_Glow_0"
                                            castShadow
                                            receiveShadow
                                            geometry={nodes.Glow_m_Glow_0.geometry}
                                            material={materials.m_Glow}
                                        />
                                    </group>
                                </group>
                            </group>
                        </group>
                    </group>
                </group>
            </group>
        </group>
    )
}

useGLTF.preload('/models/abstract_shape.glb')

export default AbstractShape;

